// Генератор Prisma клиента
generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

// Настройки подключения к базе данных PostgreSQL
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Модель аккаунта пользователя для OAuth аутентификации
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Модель сессии пользователя
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Основная модель пользователя
model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  ownedRooms    Room[]       @relation("RoomOwner")
  roomInvites   RoomInvite[]
  sessions      Session[]
}

// Модель токена верификации для подтверждения email
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Модель комнаты (проекта)
model Room {
  id          String       @id @default(cuid())
  ownerId     String
  createdAt   DateTime     @default(now())
  title       String       @default("Проект")
  owner       User         @relation("RoomOwner", fields: [ownerId], references: [id])
  roomInvites RoomInvite[]
}

// Модель приглашения в комнату
model RoomInvite {
  id     String @id @default(cuid())
  roomId String
  userId String
  room   Room   @relation(fields: [roomId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
}
